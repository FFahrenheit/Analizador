
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 28 12:08:51 CDT 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 28 12:08:51 CDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\005\000\002\003\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\005\000\002" +
    "\004\007\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\011" +
    "\000\002\004\011\000\002\015\006\000\002\015\007\000" +
    "\002\015\011\000\002\015\010\000\002\006\011\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\013\007\000\002\007\015" +
    "\000\002\010\011\000\002\011\013\000\002\012\011\000" +
    "\002\014\012\000\002\014\011\000\002\005\005\000\002" +
    "\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\006\007\006\040\004\001\002\000\004\032" +
    "\241\001\002\000\004\002\240\001\002\000\004\040\007" +
    "\001\002\000\004\032\010\001\002\000\004\033\011\001" +
    "\002\000\004\034\012\001\002\000\022\006\022\007\025" +
    "\010\014\011\021\012\017\015\015\016\027\017\031\001" +
    "\002\000\026\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\035\ufff5\001\002\000" +
    "\004\042\230\001\002\000\004\032\222\001\002\000\026" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\035\ufff2\001\002\000\004\032\210" +
    "\001\002\000\026\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\035\ufffd\001\002" +
    "\000\004\042\171\001\002\000\006\030\154\042\155\001" +
    "\002\000\026\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\035\ufff7\001\002\000" +
    "\026\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\035\ufff9\001\002\000\006\030" +
    "\137\042\140\001\002\000\026\006\022\007\025\010\014" +
    "\011\021\012\017\014\120\015\015\016\027\017\031\035" +
    "\136\001\002\000\004\032\050\001\002\000\026\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\035\ufffb\001\002\000\004\032\032\001\002" +
    "\000\010\005\033\033\035\042\034\001\002\000\006\005" +
    "\041\042\042\001\002\000\004\033\037\001\002\000\004" +
    "\041\036\001\002\000\026\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\035\uffe0" +
    "\001\002\000\004\041\040\001\002\000\026\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\035\uffdf\001\002\000\004\033\046\001\002\000" +
    "\004\005\043\001\002\000\004\033\044\001\002\000\004" +
    "\041\045\001\002\000\026\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\014\uffde\015\uffde\016\uffde\017\uffde\035\uffde" +
    "\001\002\000\004\041\047\001\002\000\026\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\035\uffdd\001\002\000\006\006\052\042\053\001" +
    "\002\000\004\033\111\001\002\000\004\042\102\001\002" +
    "\000\004\020\054\001\002\000\004\043\055\001\002\000" +
    "\004\041\056\001\002\000\006\031\060\042\061\001\002" +
    "\000\004\041\072\001\002\000\006\033\uffdb\041\uffdb\001" +
    "\002\000\004\026\062\001\002\000\012\005\064\031\065" +
    "\042\066\043\063\001\002\000\006\033\uffd9\041\uffd9\001" +
    "\002\000\006\005\067\042\070\001\002\000\006\033\uffda" +
    "\041\uffda\001\002\000\006\033\uffd8\041\uffd8\001\002\000" +
    "\006\033\uffd7\041\uffd7\001\002\000\004\005\071\001\002" +
    "\000\006\033\uffd6\041\uffd6\001\002\000\006\030\075\042" +
    "\074\001\002\000\004\033\uffd0\001\002\000\006\027\077" +
    "\030\100\001\002\000\004\042\076\001\002\000\004\033" +
    "\uffcd\001\002\000\004\043\101\001\002\000\004\033\uffce" +
    "\001\002\000\004\033\uffcf\001\002\000\004\020\103\001" +
    "\002\000\004\043\104\001\002\000\004\041\105\001\002" +
    "\000\006\031\060\042\061\001\002\000\004\041\107\001" +
    "\002\000\006\030\075\042\074\001\002\000\004\033\uffd1" +
    "\001\002\000\004\034\112\001\002\000\022\006\022\007" +
    "\025\010\014\011\021\012\017\015\015\016\027\017\031" +
    "\001\002\000\026\006\022\007\025\010\014\011\021\012" +
    "\017\014\120\015\015\016\027\017\031\035\122\001\002" +
    "\000\026\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\035\ufff6\001\002\000\026" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\035\ufff3\001\002\000\026\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\035\ufffe\001\002\000\026\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\035\ufff8\001\002\000\004\034\126\001\002\000\026" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\035\ufffa\001\002\000\026\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\035\uffd2\001\002\000\026\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\035\ufffc\001\002\000\004\014\120\001\002\000\026" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\035\ufff4\001\002\000\022\006\022" +
    "\007\025\010\014\011\021\012\017\015\015\016\027\017" +
    "\031\001\002\000\026\006\022\007\025\010\014\011\021" +
    "\012\017\014\120\015\015\016\027\017\031\035\130\001" +
    "\002\000\004\015\131\001\002\000\004\032\132\001\002" +
    "\000\006\031\060\042\061\001\002\000\004\033\134\001" +
    "\002\000\004\041\135\001\002\000\026\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\035\uffd3\001\002\000\004\002\000\001\002\000\004" +
    "\042\152\001\002\000\012\020\144\027\141\030\143\041" +
    "\142\001\002\000\004\043\150\001\002\000\026\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\035\ufff1\001\002\000\004\041\147\001\002" +
    "\000\004\043\145\001\002\000\004\041\146\001\002\000" +
    "\026\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\035\uffef\001\002\000\026\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\035\uffee\001\002\000\004\041\151\001" +
    "\002\000\026\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\035\ufff0\001\002\000" +
    "\004\041\153\001\002\000\026\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017\uffed\035" +
    "\uffed\001\002\000\004\042\167\001\002\000\012\020\161" +
    "\027\156\030\160\041\157\001\002\000\004\043\165\001" +
    "\002\000\026\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\035\uffe9\001\002\000" +
    "\004\041\164\001\002\000\004\043\162\001\002\000\004" +
    "\041\163\001\002\000\026\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\035\uffe7" +
    "\001\002\000\026\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\035\uffe6\001\002" +
    "\000\004\041\166\001\002\000\026\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\035\uffe8\001\002\000\004\041\170\001\002\000\026\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\035\uffe5\001\002\000\006\020\173\027" +
    "\172\001\002\000\004\005\202\001\002\000\004\005\174" +
    "\001\002\000\006\005\175\042\176\001\002\000\004\041" +
    "\201\001\002\000\004\005\177\001\002\000\004\041\200" +
    "\001\002\000\026\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\035\uffe1\001\002" +
    "\000\026\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\035\uffe3\001\002\000\006" +
    "\005\203\042\204\001\002\000\004\041\207\001\002\000" +
    "\004\005\205\001\002\000\004\041\206\001\002\000\026" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\035\uffe2\001\002\000\026\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\035\uffe4\001\002\000\006\031\060\042\061" +
    "\001\002\000\004\033\212\001\002\000\004\034\213\001" +
    "\002\000\022\006\022\007\025\010\014\011\021\012\017" +
    "\015\015\016\027\017\031\001\002\000\026\006\022\007" +
    "\025\010\014\011\021\012\017\014\120\015\015\016\027" +
    "\017\031\035\215\001\002\000\030\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\216\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\035\uffdc\001\002\000\004\034\217\001\002\000" +
    "\022\006\022\007\025\010\014\011\021\012\017\015\015" +
    "\016\027\017\031\001\002\000\026\006\022\007\025\010" +
    "\014\011\021\012\017\014\120\015\015\016\027\017\031" +
    "\035\221\001\002\000\026\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\035\uffd5" +
    "\001\002\000\006\031\060\042\061\001\002\000\004\033" +
    "\224\001\002\000\004\034\225\001\002\000\022\006\022" +
    "\007\025\010\014\011\021\012\017\015\015\016\027\017" +
    "\031\001\002\000\026\006\022\007\025\010\014\011\021" +
    "\012\017\014\120\015\015\016\027\017\031\035\227\001" +
    "\002\000\026\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\035\uffd4\001\002\000" +
    "\010\020\233\027\231\041\232\001\002\000\004\044\236" +
    "\001\002\000\026\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\035\uffec\001\002" +
    "\000\004\044\234\001\002\000\004\041\235\001\002\000" +
    "\026\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\035\uffea\001\002\000\004\041" +
    "\237\001\002\000\026\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\035\uffeb\001" +
    "\002\000\004\002\001\001\002\000\004\033\242\001\002" +
    "\000\004\034\243\001\002\000\022\006\022\007\025\010" +
    "\014\011\021\012\017\015\015\016\027\017\031\001\002" +
    "\000\026\006\022\007\025\010\014\011\021\012\017\014" +
    "\120\015\015\016\027\017\031\035\245\001\002\000\004" +
    "\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\025\004\017\006" +
    "\023\007\022\010\012\012\015\015\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\115\006\120\007\116\010\113" +
    "\011\123\012\114\015\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\105\001\001\000\002\001\001" +
    "\000\004\005\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\112\004\017\006\023\007\022\010\012" +
    "\012\015\015\027\001\001\000\020\004\115\006\120\007" +
    "\116\010\113\011\123\012\114\015\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\124\001\001\000\002\001" +
    "\001\000\020\003\126\004\017\006\023\007\022\010\012" +
    "\012\015\015\027\001\001\000\020\004\115\006\120\007" +
    "\116\010\113\011\123\012\114\015\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\213\004\017\006\023\007\022\010\012\012\015\015" +
    "\027\001\001\000\020\004\115\006\120\007\116\010\113" +
    "\011\123\012\114\015\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\217\004\017\006\023\007\022" +
    "\010\012\012\015\015\027\001\001\000\020\004\115\006" +
    "\120\007\116\010\113\011\123\012\114\015\122\001\001" +
    "\000\002\001\001\000\004\013\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\225\004\017\006\023" +
    "\007\022\010\012\012\015\015\027\001\001\000\020\004" +
    "\115\006\120\007\116\010\113\011\123\012\114\015\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\243\004\017\006\023\007\022\010\012\012\015\015" +
    "\027\001\001\000\020\004\115\006\120\007\116\010\113" +
    "\011\123\012\114\015\122\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PRINT ::= Print Parentesis_a Comillas Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRINT ::= Print Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRINT ::= Print Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRINT ::= Print Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Float Identificador Igual Flotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Float Identificador Op_atribucion Flotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

